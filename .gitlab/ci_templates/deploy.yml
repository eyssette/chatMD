image: node:18-alpine

# Mettre en cache les dépendances pour accélérer les builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm/

# Fichiers à compresser, nom de l'application et dossier où se trouve l'application
variables:
  FILES_TO_COMPRESS: "htm html txt text js css md ico svg"
  APP_NAME: "chatmd"
  APP_FOLDER: "app"

pages:
  script:
    # Installer les outils de compression
    - apk add --no-cache gzip brotli

    # Récupérer tous les fichiers du dépôt, de manière récursive dans un dossier temporaire .public
    - mkdir .public
    - cp -r * .public
    
    # Créer le dossier public et récupérer l'application
    - mkdir -p public
    - wget https://forge.apps.education.fr/$APP_NAME/$APP_NAME.forge.apps.education.fr/-/archive/main/$APP_NAME.forge.apps.education.fr-main.tar.bz2
    - tar -xjf $APP_NAME.forge.apps.education.fr-main.tar.bz2 --strip-components=1 -C public

    # Suppression du dossier data dans $APP_FOLDER/public
    - rm -r public/$APP_FOLDER/data

    # Copie de tous les fichiers du dépôt dans public/$APP_FOLDER (pour la partie build) et dans public/ (pour tous les autres fichiers, notamment les images et autres ressources intégrées dans le chatbot …)
    # Attention : ces fichiers écrasent les fichiers présents dans le dépôt de ChatMD
    - cp -r .public/* public/$APP_FOLDER
    - cp -r .public/* public/
    - rm -r .public
   
    # Construire l'application
    - cd public
    - npm ci --cache ../.npm --prefer-offline --no-audit
    - npm run build

    # Supprimer les modules nodes dans public
    - rm -r node_modules 

    # L'application est construite dans le répertoire app : on déplace tous les fichiers nécessaires à la racine
    # On ne copie pas par défaut les fichiers du dossier i18n original : c'est à l'utilisateur de les créer s'il le souhaite
    - mkdir -p .build .build/widget/ .build/css/themes .build/js/plugins
    - cp $APP_FOLDER/*.svg $APP_FOLDER/index.html $APP_FOLDER/script.min.js $APP_FOLDER/script.min.js.map widget/widget.min.js .build/
    - cp $APP_FOLDER/css/styles.min.css .build/css/
    - cp $APP_FOLDER/css/themes/* .build/css/themes/
    - cp widget/message.svg .build/widget/
    - cp -r $APP_FOLDER/js/plugins/* .build/js/plugins/
    - cp $APP_FOLDER/*.md .build/
    - cp -r .build/* .

    # On supprime les dossiers qui ne sont plus nécessaires
    - rm -r .build
    - rm -r app

    # Compresser les fichiers spécifiés
    - |
      echo "Compressing files with extensions: $FILES_TO_COMPRESS"
      for ext in $FILES_TO_COMPRESS; do
        find . -type f -name "*.$ext" -exec gzip -k {} \;
        find . -type f -name "*.$ext" -exec brotli {} \;
      done
    
  artifacts:
    paths:
      - public

  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
