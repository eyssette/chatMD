# https://taskfile.dev

version: '3'

vars:
  APP_FOLDER: "app"
  PORT_LOCAL_SERVER: 8888

tasks:
  build:
    aliases:
      - default
    cmds:
      - task: rollup:build
      - task: minify-widget

  rollup:build:
    deps: [npm:install]
    sources:
      - "{{.APP_FOLDER}}/data/**/*.md"
      - "{{.APP_FOLDER}}/index.md"
      - "{{.APP_FOLDER}}/css/**/*.css"
      - "{{.APP_FOLDER}}/js/**/*.mjs"
      - "{{.APP_FOLDER}}/js/**/*.js"
      - "{{.APP_FOLDER}}/DEBUG" # On v√©rifie si ce fichier a chang√© (parce qu'on a lanc√© une nouvelle version pour le DEBUG), afin de pouvoir relancer le build pour la version PROD
      - rollup.config.mjs
    generates:
      - "{{.APP_FOLDER}}/index.md"
      - "{{.APP_FOLDER}}/css/styles.min.css"
      - "{{.APP_FOLDER}}/script.min.js"
      - "{{.APP_FOLDER}}/script.min.js.map"
    method: timestamp
    cmds:
      - cmd: npx rollup --config
      - cmd: | # On supprime le fichier DEBUG si on build en version PROD
          if [ -e "{{.APP_FOLDER}}/DEBUG" ]; then
            rm "{{.APP_FOLDER}}/DEBUG"
          fi
        silent: true

  npm:install:
    sources:
      - package.json
      - package-lock.json
    generates:
      - node_modules/.package-lock.json
    cmds:
      - npm install

  debug:
    deps: [npm:install]
    sources:
    cmds:
      - cmd: npx rollup --config --environment DEBUG
      - cmd: touch "{{.APP_FOLDER}}/DEBUG" # On ajoute un fichier DEBUG pour indiquer qu'on n'est pas en mode prod (warning pour ne pas push le build de l'application)
        silent: true

  minify-widget:
    sources:
      - widget/widget.js
    generates:
      - widget/widget.min.js
    cmds:
      - npx rollup widget/widget.js --file widget.min.js --format iife  --compact  -p @rollup/plugin-terser

  push:
    vars:
      GIT_REPO_NAMES: [apps, drane, chatmd, github]
    preconditions:
      - test ! -f app/DEBUG
    cmds:
      - for: { var: GIT_REPO_NAMES }
        cmd:  git push {{.ITEM}} && git push {{.ITEM}} --tags

  tag:
    desc: "Cr√©e un tag avec pour date du tag la date du commit (usage: task tag -- <commit> <tag>)"
    cmds:
      - |
        bash -c '
        set -- "{{.CLI_ARGS}}"
        COMMIT=$1
        TAG=$2

        if [ -z "$COMMIT" ] || [ -z "$TAG" ]; then
          echo "‚ùå Usage: task tag -- <commit> <tag>"
          exit 1
        fi

        TAG_DATE=$(git show -s --format=%aD "$COMMIT")
        echo "üìå Cr√©ation du tag \"$TAG\" sur le commit $COMMIT (date: $TAG_DATE)"
        GIT_COMMITTER_DATE="$TAG_DATE" git tag -a "$TAG" "$COMMIT" -m ""
        '
    silent: false

  tests:
    cmds:
      - task: ecma
      - task: tests:unit
      - task: tests:e2e

  tests:e2e:
    aliases:
      - tests:codeceptjs
    cmds:
      - task: server:start
      - defer: {task: server:stop}
      - npx codeceptjs run --steps --grep '(?=.*)^(?!.*@WIP)'

  tests:unit:
    aliases:
      - tests:jasmine
    cmds:
      - npx jasmine --config='tests/unit/.config/jasmine.mjs'

  tests:createSteps:
    sources:
      - tests/e2e/.config/generateStepsDefinitionsFromFeatures.js
      - features/**/*.feature
      - tests/e2e/step_definitions/**/*.js
    cmds:
      - node tests/e2e/.config/generateStepsDefinitionsFromFeatures.js

  bump:
    generates:
      - VERSION
      - package.json
      - package-lock.json
    cmds:
      - cz bump

  server:start:
    cmds:
      - node --env-file=.env server.js {{.PORT_LOCAL_SERVER}} & # On lance le serveur en arri√®re-plan
      - until nc -z localhost {{.PORT_LOCAL_SERVER}}; do sleep 1; done # On attend que le port soit ouvert avant de lancer la suite
  
  server:stop:
    cmds:
      - kill $(lsof -ti :{{.PORT_LOCAL_SERVER}}) 2>/dev/null || true

  ecma:
    cmds:
      - npx es-check es2018 "app/**/*.mjs" --module